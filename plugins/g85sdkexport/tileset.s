! Generated by Tiles Creator, the graphics resources editor for Casio.
! This file contain the tileset allocating function (aTileset).

	.section ".text"
	.global _aTileset
	.type _aTileset, @function
	.align 2

	! aTileset function, C prototype : Tileset aTileset(int tilesetId)
_aTileset:
	mov.l	r14, @-r15
	sts	pr, r0
	mov.l	r0, @-r15
	mov.l	r13, @-r15
	mov	r2, r13		! Return struct adress value in r13
	mov.l	r12, @-r15
	mov.l	r11, @-r15
	mov.l	r10, @-r15
	mov.l	r9, @-r15
	mov.l	r8, @-r15
	mov.l	TilesetNumber, r0
	cmp/hi	r4, r0
	bf	Tileset_ReturnError

	mov.l	Tileset_JumpTableAddress, r0
	shll2	r4		! Offset in jtable * sizeof(int)
	add	r4, r0
	mov.l	@r0, r8
	mov.w	@r8+, r0
	mov.w	r0, @(0, r13)	! Copy Size into return struct
	extu.w	r0, r12		! r12 is now the tileset size
	mov.w	@r8+, r0
	mov.w	r0, @(2, r13)	! Copy Properties Size into return struct
	extu.w	r0, r11		! r11 is now the properties size
	mov.l	@r8+, r0
	mov.l	r0, @(4, r13)	! Copy Tiles Width and Height into return struct
	

	! Malloc of the two main array (tiles with size = sizeof(GrayTile*)*Size
	!	and properties with size = propertiesSize*Size

	mov.l	MallocSyscallID, r0
	mov.l	SyscallAddress, r14

	mov	r12, r4
	shll2	r4		! Size * 4 -> r4
	jsr	@r14
	nop
	tst	r0, r0		! Test malloc return, if == 0, then malloc error...
	bt	Tileset_ReturnError
	mov.l	r0, @(8, r13)
	mov	r0, r10

	mulu.w	r12, r11
	sts	macl, r9
	mov	r9, r4
	mov.l	MallocSyscallID, r0
	jsr	@r14
	nop
	tst	r0, r0		! Test malloc return, if == 0, then malloc error...
	bt	Tileset_ReturnError
	mov.l	r0, @(12, r13)
	mov	r0, r14


	! Copy each byte of the properties array :
	mov	r9, r1		! Number of loops
	mov	r12, r2
	shll2	r2
	add	r8, r2		! Starting address of the properties data
	mov	#0, r0
Tileset_CopyProperties:
	mov.b	@(r0, r2), r4
	mov.b	r4, @(r0, r14)
	dt	r1
	bf/s	Tileset_CopyProperties
	add	#1, r0

	! Allocate each tile with call aTile and malloc :
	mov.l	SyscallAddress, r11
	mov.l	Tileset_aTileAddress, r14
	mov	r12, r9
Tileset_AllocTiles:
	mov.l	@r8+, r12
	cmp/pz	r12		! If the tile ID is < 0, don't call malloc/aTile
	bt	Tileset_LoopNext
	mov	#0, r1
	bra	Tileset_LoopEnd
	mov.l	r1, @r10
Tileset_LoopNext:
	mov	#12, r4
	mov.l	MallocSyscallID, r0	
	jsr	@r11
	nop
	tst	r0, r0		! Test malloc return, if == 0, then malloc error...
	bt	Tileset_ReturnError
	mov.l	r0, @r10
	mov	r12, r4
	mov	r0, r2	
	jsr	@r14
	nop
Tileset_LoopEnd:
	dt	r9
	bf/s	Tileset_AllocTiles
	add	#4, r10

	bra	Tileset_End
	nop

Tileset_ReturnError:
	! In this case, init the return struct, then end of function.
	mov	#0, r0
	mov.l	r0, @r13
	mov.l	r0, @(4, r13)
	mov.l	r0, @(8, r13)
	mov.l	r0, @(12, r13)

Tileset_End:
	mov.l	@r15+, r8
	mov.l	@r15+, r9
	mov.l	@r15+, r10
	mov.l	@r15+, r11
	mov.l	@r15+, r12
	mov.l	@r15+, r13
	mov.l	@r15+, r0
	lds	r0, pr	
	rts
	mov.l	@r15+, r14


	.align 4
Tileset_JumpTableAddress:
	.long	Tileset_JTable
Tileset_aTileAddress:
	.long	_aTile

